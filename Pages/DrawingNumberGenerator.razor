@using DNG.Library.Data
@using DNG.Library.Models
@using Microsoft.AspNetCore.Components.Forms
@using global::DrawingNumberGenerator.Library.Models
@inject IJSRuntime JSRuntime

@*<DrawingNumberGeneratorInstructions/>*@

<EditForm Model="@drawingRequest" OnValidSubmit="GenerateDrawingNumber">

    <script>
        function selectAllText(element) {
            setTimeout(function() {
                element.select();
            }, 0);
        }
    </script>

    <div class="row d-flex mb-4">
        <!-- Left Column -->
        <div class="col-12 d-flex">
            <div class="card mb-3 flex-fill">
                <div class="card-body">
                    <!-- Drawing Number Display -->
                    <h1 class="copy-button text-center" @onclick="CopyDrawingNumberToClipboard" id="drawingNumber">
                        @DrawingNumber.GetDrawingNumber(NoFlightsRollerOrGrips)
                    </h1>
                    <div id="copyDialog" class="dialog" style="display: none;">
                        Drawing number has been copied to clipboard!
                    </div>

                    <!-- Instructions Section -->
                    <div class="instructions-section">
                        <button @onclick="ToggleInstructions" class="btn btn-outline-secondary mb-3 btn-sm">
                            @if (showInstructions)
                            {
                                <span>Hide Instructions</span>
                            }
                            else
                            {
                                <span>Show Instructions</span>
                            }
                        </button>

                        <div class="instructions-content" style="display: @(showInstructions ? "block" : "none")">
                            <div class="alert alert-success mt-2">
                                <p><strong>Instructions for using the Drawing Number:</strong></p>
                                <p>When you generate a drawing number, use it to search for CAD files on the network drive. The drawing number helps you find specific files like CAD drawings, manuals, PDFs, and more.</p>

                                <p><strong>Here’s how it works:</strong></p>
                                <ul>
                                    <li><strong>Drop-down Menus:</strong> Each part of the drawing number comes from choices in drop-down menus. You can leave parts out by using asterisks (*). For example, if you don't need to specify the belt type, you can use * to search more broadly.</li>
                                    <li><strong>Use Asterisks Strategically:</strong> Add an asterisk (*) in place of parts of the drawing number that aren’t important to your search. This widens your search to include similar belts.</li>
                                    <li><strong>Search Example:</strong> If your drawing number is <code>123-M-ABC-456</code>, and you want to search for all belts of a similar type but not the exact same, try <code>123-*-ABC-456</code>. This will find belts with the same part numbers but different belt types.</li>
                                </ul>

                                <p class="mt-2"><strong>Tip:</strong> This makes it faster to find related parts and documentation for special builds.</p>

                                <p class="mt-2"><strong>Best Practice:</strong> When you don't know the full drawing number, using asterisks (*) helps you get a wider search. Just be sure to keep the important parts, like part numbers, as they are.</p>

                                <div class="mt-2">
                                    <strong>Summary of Steps:</strong>
                                    <ol>
                                        <li>Generate the drawing number using the form.</li>
                                        <li>Copy it to the clipboard and paste it in the network search.</li>
                                        <li>Use asterisks in place of non-critical parts of the drawing number to widen your search for similar builds.</li>
                                    </ol>
                                </div>
                            </div>

                            <!-- Export JSON Button Instructions -->
                            <div class="alert alert-info mt-2">
                                <p><strong>Export JSON Button:</strong></p>
                                <p>This button allows you to export the data from the form in a concise JSON format. It’s useful for storing project details or sharing with team members without manually inputting each field.</p>
                                <p class="mt-2"><strong>How to leverage it for faster data entry:</strong></p>
                                <ul>
                                    <li><strong>Pre-fill Projects:</strong> Use the JSON export feature to save previous configurations. This can act as a template for new projects, allowing you to quickly load and adjust parameters instead of starting from scratch.</li>
                                    <li><strong>Efficiency:</strong> Exporting data as JSON makes it easier to reference multiple projects and avoid re-entering repetitive information. Simply load the JSON to fill out the fields instantly.</li>
                                </ul>
                                <p class="mt-2"><strong>Tip:</strong> When exporting JSON, be sure to use consistent naming conventions and structure for quick retrieval later.</p>
                            </div>

                            <!-- Disabled Fields Info -->
                            <div class="alert alert-warning mt-2">
                                <p><strong>Note on Disabled Fields:</strong></p>
                                <p>The <strong>F/R/G Centers</strong> and <strong>Qty. Rollers Across Width</strong> fields have been temporarily disabled for now. They will be available once we fully understand their relevance and how to best integrate them into the workflow.</p>
                                <p class="mt-2"><strong>For now:</strong> Please proceed with other fields, and we will update you when these become active.</p>
                            </div>

                        </div>
                    </div>

                    <!-- Upload Component -->
                    <div class="d-flex justify-content-center">
                        <Upload DrawingNumber="@DrawingNumber" userInput="@drawingRequest" />
                    </div>
                </div>
            </div>
        </div>
    </div>

    @code {
        private bool showInstructions = false;

        // Method to toggle the instructions visibility
        private void ToggleInstructions()
        {
        showInstructions = !showInstructions;
        }
    }

    


    @code {
        private void OnSelectedValueChanged(ChangeEventArgs e)
        {
            GenerateDrawingNumber();
        }
    }

    
    <DrawingFormContainer drawingRequest="@drawingRequest" drawingNumber="@DrawingNumber">
    <FormContent>
            <h2 class="text-center bg-success text-light">Belt Information Section</h2>

            <div class="input-group input-group-sm mb-3">
                <span class="input-group-text">@BeltType.GetNameByCode(drawingRequest.BeltType, BeltType.Options)</span>
                <label class="input-group-text" for="beltType">Type</label>
                <div class="input-group-text">
                    <input disabled class="form-check-input mt-0" type="checkbox" value="" aria-label="Checkbox for following text input">
                </div>
                <select id="beltType"
                        @ref="beltTypeDropdownRef"
                        @onkeydown="@(e => HandleKeyDown(e, beltTypeDropdownRef))"
                        @onblur="@(e => HandleBlur(beltTypeDropdownRef))"
                        @bind="drawingRequest.BeltType"
                        aria-required="true"
                        aria-describedby="beltTypeHelp"
                        class="form-select form-select-sm" required autofocus>

                    @foreach (var type in beltTypes)
                    {
                        if (type?.ToLower() == "m")
                        {
                            <option value="@type" selected>@type</option>
                        }
                        else
                        {
                            <option value="@type">@type</option>
                        }
                    }
                </select>
            </div>

            <div class="input-group input-group-sm mb-3">
                <span class="input-group-text">@BeltSeries.GetBeltSeriesType(drawingRequest.BeltSeries)</span>
                <label class="input-group-text" for="beltSeries">Series</label>

                <div class="input-group-text">
                    <input disabled class="form-check-input mt-0" type="checkbox" value="" aria-label="Checkbox for following text input">
                </div>

                <!-- Updated Select Dropdown with @onchange calling GenerateDrawingNumber() -->
                <select id="beltSeries"
                        @ref="beltSeriesDropdownRef"
                        @onkeydown="@(e => HandleKeyDown(e, beltSeriesDropdownRef))"
                        @onblur="@(e => HandleBlur(beltSeriesDropdownRef))"
                        @bind="drawingRequest.BeltSeries"
                        aria-required="true"
                        aria-describedby="beltSeriesHelp"
                        class="form-select form-select-sm" required autofocus>

                    @foreach (var series in beltSeries)
                    {
                        <option value="@series">@series</option>
                    }
                </select>

            </div>

            <div class="input-group input-group-sm mb-3">
                <span class="input-group-text">@MaterialColor.GetCodeByName(drawingRequest.Color, MaterialColor.Options)</span>
                <label class="input-group-text" for="color">Color</label>

                <div class="input-group-text">
                    <input disabled class="form-check-input mt-0" type="checkbox" value="" aria-label="Checkbox for following text input">
                </div>

                <!-- Updated Select Dropdown with @onchange calling GenerateDrawingNumber() -->
                <select id="color"
                        @ref="colorDropdownRef"
                        @onkeydown="@(e => HandleKeyDown(e, colorDropdownRef))"
                        @onblur="@(e => HandleBlur(colorDropdownRef))"
                        @bind="drawingRequest.Color"
                        aria-required="true"
                        aria-describedby="colorHelp"
                        class="form-select form-select-sm" required autofocus>

                    @foreach (var color in colors)
                    {
                        <option value="@color">@color</option>
                    }
                </select>

            </div>

            <div class="input-group input-group-sm mb-3">
                <span class="input-group-text">@BeltMaterial.GetCodeByName(drawingRequest.Material, BeltMaterial.Options)</span>
                <label class="input-group-text" for="material">Material</label>

                <div class="input-group-text">
                    <input disabled class="form-check-input mt-0" type="checkbox" value="" aria-label="Checkbox for following text input">
                </div>

                <!-- Updated Select Dropdown with @onchange calling GenerateDrawingNumber() -->
                <select id="material"
                        @ref="materialDropdownRef"
                        @onkeydown="@(e => HandleKeyDown(e, materialDropdownRef))"
                        @onblur="@(e => HandleBlur(materialDropdownRef))"
                        @bind="drawingRequest.Material"
                        aria-required="true"
                        aria-describedby="materialHelp"
                        class="form-select form-select-sm" required autofocus>

                    @foreach (var material in materials)
                    {
                        <option value="@material">@material</option>
                    }
                </select>


            </div>

            <div class="input-group input-group-sm mb-3">
                <span class="input-group-text">@AdderMaterial.GetCodeByName(drawingRequest.AdderMaterial, AdderMaterial.Options)</span>
                <label class="input-group-text" for="adderMaterial">Adder Material</label>

                <div class="input-group-text">
                    <input disabled class="form-check-input mt-0" type="checkbox" value="" aria-label="Checkbox for following text input">
                </div>

                <!-- Updated Select Dropdown with @onchange calling GenerateDrawingNumber() -->
                <select id="adderMaterial"
                        @ref="adderMaterialDropdownRef"
                        @onkeydown="@(e => HandleKeyDown(e, adderMaterialDropdownRef))"
                        @onblur="@(e => HandleBlur(adderMaterialDropdownRef))"
                        @bind="drawingRequest.AdderMaterial"
                        aria-required="true"
                        aria-describedby="adderMaterialHelp"
                        class="form-select form-select-sm" required autofocus>

                    @foreach (var adder in adderMaterials)
                    {
                        <option value="@adder">@adder</option>
                    }
                </select>
            </div>

            <div class="input-group input-group-sm mb-3">
                <span class="input-group-text">@RodMaterial.GetCodeByName(drawingRequest.RodMaterial, RodMaterial.Options)</span>
                <label class="input-group-text" for="rodMaterial">Rod</label>

                <div class="input-group-text">
                    <input disabled class="form-check-input mt-0" type="checkbox" value="" aria-label="Checkbox for following text input">
                </div>

                <!-- Updated Select Dropdown with @onchange calling GenerateDrawingNumber() -->
                <select id="rodMaterial"
                        @ref="rodMaterialDropdownRef"
                        @onkeydown="@(e => HandleKeyDown(e, rodMaterialDropdownRef))"
                        @onblur="@(e => HandleBlur(rodMaterialDropdownRef))"
                        @bind="drawingRequest.RodMaterial"
                        aria-required="true"
                        aria-describedby="rodMaterialHelp"
                        class="form-select form-select-sm" required autofocus>

                    @foreach (var rod in rodMaterials)
                    {
                        <option value="@rod">@rod</option>
                    }
                </select>
            </div>

            @*Width*@
            <div class="input-group input-group-sm mb-3">
                <span class="input-group-text">@DrawingNumber.BeltWidthCode</span>
                <label class="input-group-text" for="beltWidth">Width (inches)</label>

                <div class="input-group-text">
                    <input disabled class="form-check-input mt-0" type="checkbox" value="" aria-label="Checkbox for following text input">
                </div>

                <InputNumber @onblur="@(e => HandleBlur(beltWidthRef))"
                             id="beltWidth"
                             aria-required="true"
                             aria-describedby="beltWidthHelp"
                             @bind-Value="drawingRequest.BeltWidth"
                             Min="1"
                             Max="999"
                             class="form-control"
                             onfocus="selectAllText(this)" />
            </div>

            <h2 class="text-center bg-success text-light">Flights/Rollers/Grip Section</h2>

            <div class="form-check form-switch  mt-3">

                <input class="form-check-input" type="checkbox" id="noFlightsSwitch" @bind="NoFlightsRollerOrGrips" />
                <label class="form-check-label" for="noFlightsSwitch">No Flights Roller Or Grips</label>
            </div>

            @*Flights/Rollers/Grip*@
            <div class="input-group input-group-sm mb-3">
                <span class="input-group-text">@DrawingNumber.FlightsRollersGripsCode</span>
                <label class="input-group-text" for="flightsRollersGrip">Flights/Rollers/Grip</label>

                <div class="input-group-text">
                    <input disabled class="form-check-input mt-0" type="checkbox" value="" aria-label="Checkbox for following text input">
                </div>

                <select id="flightsRollersGrip"
                        @ref="flightsRollersGripDropdownRef"
                        @onkeydown="@(e => HandleKeyDown(e, flightsRollersGripDropdownRef))"
                        @onblur="@(e => HandleBlur(flightsRollersGripDropdownRef))"
                        aria-required="true"
                        aria-describedby="flightsRollersGripHelp"
                        @bind="drawingRequest.FlightsRollersGrip"
                        class="form-select form-select-sm">
                    @foreach (var type in flightsRollersGrips)
                    {
                        <option value="@type">@type</option>
                    }
                </select>

            </div>

            @*Qty Rollers Width*@
            <div class="input-group input-group-sm mb-3">
                <span class="input-group-text">@DrawingNumber.QtyRollersAcrossWidth</span>
                <label class="input-group-text" for="qtyRollersAcrossWidth">Qty. Rollers Width</label>

                <div class="input-group-text">
                    <input disabled class="form-check-input mt-0" type="checkbox" value="" aria-label="Checkbox for following text input">
                </div>

                <InputNumber id="qtyRollersAcrossWidth"
                             aria-required="true"
                             aria-describedby="qtyRollersAcrossWidthHelp"
                             @onblur="@(e => HandleBlur(qtyRollerWidth))"
                             @bind-Value="drawingRequest.QtyRollersAcrossWidth"
                             Min="1"
                             Max="20"
                             class="form-control"
                             disabled
                             onfocus="selectAllText(this)" />
            </div>

            @*F/R/G Centers*@
            <div class="input-group input-group-sm mb-3">
                <span class="input-group-text">@DrawingNumber.FRGCenters</span>
                <label class="input-group-text" for="frgCenters">F/R/G Centers</label>

                <div class="input-group-text">
                    <input disabled class="form-check-input mt-0" type="checkbox" value="" aria-label="Checkbox for following text input">
                </div>

                <InputNumber id="frgCenters"
                             aria-required="true"
                             aria-describedby="frgCentersHelp"
                             @onblur="@(e => HandleBlur(frgCenters))"
                             @bind-Value="drawingRequest.FRGCenters"
                             Min="1"
                             Max="100"
                             class="form-control"
                             disabled
                             onfocus="selectAllText(this)" />
            </div>

            <h2 class="text-center bg-success text-light">Belt Accessories Section</h2>


            <div class="input-group input-group-sm mb-3">
                <span class="input-group-text">@DrawingNumber.BeltAccessoriesCode</span>
                <label class="input-group-text" for="beltAccessories">Accessories</label>

                <div class="input-group-text">
                    <input disabled class="form-check-input mt-0" type="checkbox" value="" aria-label="Checkbox for following text input">
                </div>

                <!-- Updated Select Dropdown with @onchange calling GenerateDrawingNumber() -->
                <select id="beltAccessories"
                        @ref="beltAccessoriesDropdownRef"
                        @onkeydown="@(e => HandleKeyDown(e, beltAccessoriesDropdownRef))"
                        @onblur="@(e => HandleBlur(beltAccessoriesDropdownRef))"
                        @bind="drawingRequest.BeltAccessories"
                        aria-required="true"
                        aria-describedby="beltAccessoriesHelp"
                        class="form-select form-select-sm" required autofocus>

                    @foreach (var accessory in beltAccessories)
                    {
                        <option value="@accessory">@accessory</option>
                    }
                </select>

            </div>

            <div class="input-group input-group-sm mb-3">
                <span class="input-group-text">@DrawingNumber.FrictionAntiStaticCode</span>
                <label class="input-group-text" for="frictionAntiStatic">Friction/Anti Static</label>

                <div class="input-group-text">
                    <input disabled class="form-check-input mt-0" type="checkbox" value="" aria-label="Checkbox for following text input">
                </div>

                <!-- Updated Select Dropdown with @onchange calling GenerateDrawingNumber() -->
                <select id="frictionAntiStatic"
                        @ref="frictionAntiStaticDropdownRef"
                        @onkeydown="@(e => HandleKeyDown(e, frictionAntiStaticDropdownRef))"
                        @onblur="@(e => HandleBlur(frictionAntiStaticDropdownRef))"
                        @bind="drawingRequest.FrictionAntiStatic"
                        aria-required="true"
                        aria-describedby="frictionAntiStaticHelp"
                        class="form-select form-select-sm" required autofocus>

                    @foreach (var type in frictionAntiStatics)
                    {
                        <option value="@type">@type</option>
                    }
                </select>
            </div>

            <div class="input-group input-group-sm mb-3">
                <span class="input-group-text">@SidePLLaneDV.GetCodeByName(drawingRequest.SidePLLaneDV, SidePLLaneDV.Options)</span>
                <label class="input-group-text" for="sidePLLaneDV">Side-PL/Lane-DV</label>

                <div class="input-group-text">
                    <input disabled class="form-check-input mt-0" type="checkbox" value="" aria-label="Checkbox for following text input">
                </div>

                <!-- Updated Select Dropdown with @onchange calling GenerateDrawingNumber() -->
                <select id="sidePLLaneDV"
                        @ref="sidePLLaneDVDropdownRef"
                        @onkeydown="@(e => HandleKeyDown(e, sidePLLaneDVDropdownRef))"
                        @onblur="@(e => HandleBlur(sidePLLaneDVDropdownRef))"
                        @bind="drawingRequest.SidePLLaneDV"
                        aria-required="true"
                        aria-describedby="sidePLLaneDVHelp"
                        class="form-select form-select-sm" required autofocus>

                    @foreach (var type in sidePLLaneDVs)
                    {
                        <option value="@type">@type</option>
                    }
                </select>
            </div>

            <h2 class="text-center bg-success text-light">Unique Identification Section</h2>






            <div class="input-group input-group-sm mb-3">
                <span class="input-group-text">@DrawingNumber.UniqueIdentification</span>
                <label class="input-group-text" for="uniqueIdentification">Unique Identification</label>

                <div class="input-group-text">
                    <input disabled class="form-check-input mt-0" type="checkbox" value="" aria-label="Checkbox for following text input">
                </div>

                <InputText id="uniqueIdentification"
                           aria-required="true"
                           aria-describedby="uniqueIdentificationHelp"
                           @bind-Value="drawingRequest.UniqueIdentification"
                           class="form-select form-select-sm"
                           minlength="1"
                           maxlength="2"
                           onfocus="selectAllText(this)" />

                <div id="uniqueIdentificationHelp" class="form-text text-muted">
                    @DrawingNumber.UniqueIdentification
                </div>
            </div>

            <div class="input-group input-group-sm mb-3">
                <span class="input-group-text">@DrawingNumber.IndentCode</span>
                <label class="input-group-text" for="indentCode">Indent Code</label>

                <div class="input-group-text">
                    <input disabled class="form-check-input mt-0" type="checkbox" value="" aria-label="Checkbox for following text input">
                </div>

                <select id="indentCode"
                        @ref="indentCodeDropdownRef"
                        @onkeydown="@(e => HandleKeyDown(e, indentCodeDropdownRef))"
                        @onblur="@(e => HandleBlur(indentCodeDropdownRef))"
                        @bind="drawingRequest.IndentCode"
                        aria-required="true"
                        aria-describedby="indentCodeHelp"
                        class="form-select form-select-sm">
                    @foreach (var type in indents)
                    {
                        <option value="@type">@type</option>
                    }
                </select>

                <div id="indentCodeHelp" class="form-text text-muted">
                    @DrawingNumber.IndentCode
                </div>
            </div>


            <div class="row p-3">


                

                @* <button type="submit" disabled="@isProcessing" class="btn btn-primary btn-block mt-4" aria-label="Generate Drawing Number">Generate Drawing Number</button> *@



                <hr>
            </div>
    </FormContent>
</DrawingFormContainer>


    

    
</EditForm>


