@page "/parse-drawing-request"
@using DNG.Library.Models.BeltSpecs
@inherits BaseInputComponent
@inject IDrawingRequestParserService ParserService
@inject IStateContainer State

<div class="container-fluid no-print my-2" style="max-width: 800px;">
    <div class="card">
        <div class="d-flex justify-content-between align-items-center card-header">
            <h4 class="small mb-0">
                <i class="fa-solid fa-file-alt"></i> Drawing Request Parser
            </h4>
        </div>

        <div class="alert alert-secondary p-3 mb-2 rounded-0" style="font-size: 0.8rem;">
            Paste your drawing request in the textbox below and click "Parse" to extract parameters.

            
        </div>

        <div class="card-body">
            <textarea @bind="structuredText" rows="13" class="form-control mb-3" placeholder="Paste drawing request here..."></textarea>
            <button type="button" class="btn btn-primary w-100" @onclick="ParseInput">Parse</button>
        </div>

        <!-- Parsed Parameters Display -->
        @if (ParsedRequest != null)
        {
            <div class="card-body">
                <table class="table table-sm m-0">
                    <tbody>
                        @* Belt Series *@
                        @if (!string.IsNullOrWhiteSpace(ParsedRequest.BeltSeries))
                        {
                            <tr>
                                <th scope="row">Belt Series</th>
                                <td>@ParsedRequest.BeltSeries</td>
                                @* <td><button type="button" class="btn btn-sm btn-primary w-100" @onclick="UpdateBeltSeries">Apply</button></td> *@
                            </tr>
                        }

                        @* Belt Type *@
                        @if (!string.IsNullOrWhiteSpace(ParsedRequest.BeltType))
                        {
                            <tr>
                                <th scope="row">Belt Type</th>
                                <td>@ParsedRequest.BeltType</td>
                                 @* <td><button type="button" class="btn btn-sm btn-primary w-100" @onclick="UpdateBeltType">Apply</button></td> *@
                            </tr>
                        }

                        @* Belt Material *@
                        @if (!string.IsNullOrWhiteSpace(ParsedRequest.Material))
                        {
                            <tr>
                                <th scope="row">Belt Material</th>
                                <td>@ParsedRequest.Material</td>
                                @* <td><button type="button" class="btn btn-sm btn-primary w-100" @onclick="UpdateMaterial">Apply</button></td> *@
                            </tr>
                        }

                        @* Belt Color *@
                        @if (!string.IsNullOrWhiteSpace(ParsedRequest.Color))
                        {
                            <tr>
                                <th scope="row">Belt Color</th>
                                <td>@ParsedRequest.Color</td>
                                @* <td><button type="button" class="btn btn-sm btn-primary w-100" @onclick="UpdateColor">Apply</button></td> *@
                            </tr>
                        }

                        @* Rods *@
                        @if (!string.IsNullOrWhiteSpace(ParsedRequest.RodMaterial))
                        {
                            <tr>
                                <th scope="row">Rods</th>
                                <td>@ParsedRequest.RodMaterial</td>
                                @* <td><button type="button" class="btn btn-sm btn-primary w-100" @onclick="UpdateRodMaterial">Apply</button></td> *@
                            </tr>
                        }

                        @* Belt Width *@
                        @if (ParsedRequest.BeltWidth > 0)
                        {
                            <tr>
                                <th scope="row">Belt Width (IN)</th>
                                <td>@ParsedRequest.BeltWidth</td>
                                @* <td><button type="button" class="btn btn-sm btn-primary w-100" @onclick="UpdateBeltWidth">Apply</button></td> *@
                            </tr>
                        }

                        @* Links *@
                        @if (ParsedRequest.NumberOfLinks > 0)
                        {
                            <tr>
                                <th scope="row">Links</th>
                                <td>@ParsedRequest.NumberOfLinks</td>
                                @* <td><button type="button" class="btn btn-sm btn-primary w-100" @onclick="UpdateNumberOfLinks">Apply</button></td> *@
                            </tr>
                        }

                        @* Flight *@
                        @if (!string.IsNullOrWhiteSpace(ParsedRequest.FlightsRollersGrip))
                        {
                            <tr>
                                <th scope="row">Flight</th>
                                <td>@ParsedRequest.FlightsRollersGrip</td>
                                @* <td><button type="button" class="btn btn-sm btn-primary w-100" @onclick="UpdateFlightsRollersGrip">Apply</button></td> *@
                            </tr>
                        }

                        @* Spacing *@
                        @if (ParsedRequest.FRGCenters > 0)
                        {
                            <tr>
                                <th scope="row">Spacing (IN)</th>
                                <td>@ParsedRequest.FRGCenters</td>
                                @* <td><button type="button" class="btn btn-sm btn-primary w-100" @onclick="UpdateFRGCenters">Apply</button></td> *@
                            </tr>
                        }

                        @* Indent *@
                        @if (!string.IsNullOrWhiteSpace(ParsedRequest.IndentCode))
                        {
                            <tr>
                                <th scope="row">Indent (IN)</th>
                                <td>@ParsedRequest.IndentCode</td>
                                @* <td><button type="button" class="btn btn-sm btn-primary w-100" @onclick="UpdateIndentCode">Apply</button></td> *@
                            </tr>
                        }

                        @* Center Notch *@
                        @* @if (ParsedRequest. > 0)
                        {
                            <tr>
                                <th scope="row">Center Notch (IN)</th>
                                <td>@ParsedRequest.</td>
                            </tr>
                        } *@

                        @* Saniclip *@
                        @* @if (ParsedRequest. > 0 || ParsedRequest. > 0)
                        {
                            <tr>
                                <th scope="row">Saniclip</th>
                                <td>
                                    @if (ParsedRequest. > 0)
                                    {
                                        <span>Qty: @ParsedRequest.</span>
                                    }
                                    @if (ParsedRequest. > 0)
                                    {
                                        <span class="ms-2">Spacing: @ParsedRequest.</span>
                                    }
                                </td>
                            </tr>
                        } *@
                    </tbody>
                </table>

                <!-- Special Cases Alerts -->
                @if (ParsedRequest.SpecialCaseInfo.Any())
                {
                    <div class="mt-3">
                        @foreach (var info in ParsedRequest.SpecialCaseInfo)
                        {
                            <div class="alert alert-warning" role="alert">
                                <strong>@info.Key:</strong> @info.Value
                            </div>
                        }
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    private IDrawingRequest ParsedRequest { get; set; }

    private async Task ParseInput()
    {
        try
        {
            ParsedRequest = await ParserService.ParseDrawingRequestAsync(structuredText);
        }
        catch (Exception ex)
        {
            // Handle parsing errors, possibly by showing an alert
            ParsedRequest = null;
            Console.Error.WriteLine($"Error parsing drawing request: {ex.Message}");
        }
    }

    private string structuredText
    {
        get => State!.DrawingRequest?.StructuredText ?? string.Empty;
        set
        {
            if (State!.DrawingRequest != null && State.DrawingRequest.StructuredText != value)
            {
                State.UpdateProperty(State.DrawingRequest, dr => dr.StructuredText = value);
            }
        }
    }

    private void UpdateBeltSeries()
    {
        State.UpdateProperty(State.DrawingRequest, dr => dr.BeltSeries = ParsedRequest.BeltSeries);
    }
    private void UpdateMaterial()
    {
        string material = ParsedRequest.Material.ToLower();

        var result = BeltMaterial.Options.Values.Where(_ => _.ToLower()
        .Contains(material))
        .ToList()
        .FirstOrDefault()!;

        State.UpdateProperty(State.DrawingRequest, dr => dr.Material = result);
    }
    private void UpdateColor()
    {
        State.UpdateProperty(State.DrawingRequest, dr => dr.Color = ParsedRequest.Color);
    }
    private void UpdateRodMaterial()
    {
        string rodMaterial = ParsedRequest.RodMaterial.ToLower();

        var result = RodMaterial.Options.Values.Where(_ => _.ToLower()
        .Contains(rodMaterial))
        .ToList()
        .FirstOrDefault()!;
        State.UpdateProperty(State.DrawingRequest, dr => dr.RodMaterial = result);
    }
    private void UpdateBeltWidth()
    {
        State.UpdateProperty(State.DrawingRequest, dr => dr.BeltWidth = ParsedRequest.BeltWidth);
    }
    private void UpdateNumberOfLinks()
    {
        State.UpdateProperty(State.DrawingRequest, dr => dr.NumberOfLinks = ParsedRequest.NumberOfLinks);
    }
    private void UpdateFlightsRollersGrip()
    {
        State.UpdateProperty(State.DrawingRequest, dr => dr.FlightsRollersGrip = ParsedRequest.FlightsRollersGrip);
    }
    private void UpdateFRGCenters()
    {
        State.UpdateProperty(State.DrawingRequest, dr => dr.FRGCenters = ParsedRequest.FRGCenters);
    }
    private void UpdateIndentCode()
    {
        State.UpdateProperty(State.DrawingRequest, dr => dr.IndentCode = ParsedRequest.IndentCode);
    }
}
