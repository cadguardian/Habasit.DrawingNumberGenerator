@page "/image-gallery"
@inject IImageGalleryService ImageService
@inject IDrawingRequest drawingRequest

<label class="small alert alert-warning my-2 no-print">
    Observe features of a Plastic Modular Belt.
</label>

<div class="container-fluid no-print my-2">
    <div class="card">
        <!-- Header Section -->
        <div class="d-flex justify-content-between align-items-center card-header">
            <span class="fw-bold"><i class="fa-regular fa-image"></i> Plastic Modular Gallery</span>
            @if (imageFiles != null)
            {
                <small class="text-muted">
                    <span>Total Images: @imageFiles.Count</span>
                </small>
            }
        </div>

        <!-- Filter and Search Information -->
        <div class="alert alert-info p-2" style="font-size: 0.8rem;">
            Use <strong>Apply Filters</strong> to refine results, then <strong>Search Images</strong> to locate specific images.
        </div>

        <!-- Filter and Search Section -->
        <div class="d-flex mb-1 p-3">
            <div class="input-group me-2 flex-grow-1">
                <input type="text" class="form-control" placeholder="Search images..." @bind="searchQuery" @bind:event="oninput" @onkeypress="HandleKeyPress" />
                @if (isSearchMode)
                {
                    <button class="btn btn-outline-secondary" @onclick="ClearSearch">Clear</button>
                }
            </div>
        </div>

        <div class="text-center mb-4">
            <div class="btn-group" role="group">
                <button class="btn btn-sm btn-dark" @onclick="ApplyFilters">Apply Filters</button>
                <button class="btn btn-sm btn-primary" @onclick="OnSearch">Search Images</button>
            </div>
        </div>

        <!-- Gallery Display -->
        @if (selectedImage == null)
        {
            <div class="gallery-container">
                <div class="row">
                    @foreach (var image in FilteredImages)
                    {
                        <div class="col-6 col-sm-4 col-md-3 col-lg-2 mb-3">
                            <div class="card h-100 image-card" @onclick="() => ShowImage(image)">
                                <img src="images/belts/@image" class="card-img-top" alt="@ImageService.FormatImageName(image)" />
                                <div class="card-body p-1">
                                    <p class="card-text text-center small">@ImageService.FormatImageName(image)</p>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            <!-- Full Image View -->
            <div class="text-center">
                <img src="images/belts/@selectedImage" class="img-fluid" alt="@ImageService.FormatImageName(selectedImage)" style="max-height: 70vh;" />
                <p class="text-muted mt-2">@ImageService.FormatImageName(selectedImage)</p>
                <button class="btn btn-outline-secondary mt-3" @onclick="ClearSelectedImage">Back to Gallery</button>
            </div>
        }
    </div>
</div>

@code {
    private List<string> imageFiles = new();
    private string searchQuery = string.Empty;
    private string? selectedImage = null;
    private bool isSearchMode = false;

    protected override async Task OnInitializedAsync()
    {
        imageFiles = await ImageService.LoadImageFilesAsync();
    }

    private IEnumerable<string> FilteredImages => ImageService.FilterImages(imageFiles, searchQuery);

    private void ShowImage(string image)
    {
        selectedImage = image;
    }

    private void ClearSelectedImage()
    {
        selectedImage = null;
    }

    private void ApplyFilters()
    {
        // Update searchQuery based on filter criteria
        searchQuery = !string.IsNullOrWhiteSpace(drawingRequest.BeltType) ? drawingRequest.BeltSeries : string.Empty;
    }

    private void OnSearch()
    {
        isSearchMode = !string.IsNullOrWhiteSpace(searchQuery);
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            OnSearch();
        }
    }

    private void ClearSearch()
    {
        searchQuery = string.Empty;
        isSearchMode = false;
    }
}


<style>
    .gallery-container {
        max-height: 40vh;
        overflow-y: auto;
        padding-right: 15px;
    }

    .card-img-top {
        object-fit: contain;
        max-height: 150px;
        width: 100%;
    }

    .image-card {
        cursor: pointer;
    }

    .gallery-container::-webkit-scrollbar {
        width: 8px;
    }

    .gallery-container::-webkit-scrollbar-thumb {
        background-color: #ccc;
        border-radius: 4px;
    }

    .gallery-container::-webkit-scrollbar-track {
        background-color: #f1f1f1;
    }
</style>
