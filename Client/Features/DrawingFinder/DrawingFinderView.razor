@using System.Text.RegularExpressions
@using System.IO
@using Client.Features.DWGNumberDecipher
@inject HttpClient Http
@inject IJSRuntime JS
@inject IStateContainer State
@inject IDrawingFileService DrawingFileService

<div class="container-fluid no-print mb-3 mt-3" style="max-width: 650px;">

    <div class="card">
        <div class="d-flex justify-content-between align-items-center card-header">
            <h4 class="small"><i class="fa-solid fa-folder-tree"></i> Drawing Finder</h4>

            @if (allFiles != null)
            {
                <small class="text-muted">
                    <span>Total Drawings: @allFiles.Count</span>
                </small>
            }
        </div>

        <div class="alert alert-secondary p-3 p-2" style="font-size: 0.8rem;">
            Use <strong>*</strong> as a wildcard: <strong>*term</strong> to find items ending with "term", <strong>term*</strong> for items starting with "term", or <strong>term*term</strong> for partial matches.
        </div>

        <div class="d-flex mb-3 p-3">
            <div class="input-group me-2 flex-grow-1">
                <input id="cad-files-search" type="text" class="form-control" placeholder="Search for CAD files..." @bind="searchQuery" @bind:event="oninput" @onkeypress="HandleKeyPress" />
                <div class="btn-group" role="group">
                    <button class="btn btn-sm btn-dark" @onclick="ApplyFilters">Filter</button>
                    <button class="btn btn-sm btn-primary" @onclick="OnSearch">Search</button>
                </div>
                @if (isSearchMode)
                {
                    <button class="btn btn-outline-secondary" @onclick="ClearSearch">Clear</button>
                }
            </div>
        </div>
    

        @if (isSearchMode)
        {
            @if (searchResults.Any())
            {
                <ul class="list-group list-group-flush">
                    @foreach (var file in searchResults)
                    {
                        <li class="list-group-item d-flex align-items-center">
                            <span class="me-2">@GetFileIcon(file.FileType)</span>
                            <div class="flex-grow-1">
                                <h6 class="mb-1">@file.DisplayName</h6>
                                <small class="text-muted"> @file.RelativePath</small>
                            </div>
                            <button class="btn btn-outline-primary btn-sm"
                                    @onclick="() => CopyFilePathToClipboard(file.RelativePath)"
                                    data-bs-toggle="tooltip"
                                    title="Copy to clipboard">
                                <i class="bi bi-clipboard"></i> Copy
                            </button>
                        </li>
                    }
                </ul>

                if (searchResults.Any())
                {
                    State.DrawingRequest.ReferenceDrawingPath = searchResults.FirstOrDefault()!.RelativePath;
                }
            }
            else
            {
                <div class="alert alert-secondary p-3 text-center">No results found for "<strong>@searchQuery</strong>". try ending with an <strong>*. For example: *@searchQuery*</strong></div>
            }
        }
    </div>
</div>

@code {
    private ReportHeader? reportHeader;
    private string searchQuery = string.Empty;
    private bool isSearchMode = false;
    private List<FileItemDisplay> searchResults = new();
    private List<FileItem> allFiles = new();

    protected override async Task OnInitializedAsync()
    {
        State.OnStateChange += StateHasChanged;
        reportHeader = await DrawingFileService.LoadReportHeaderAsync(Http, "data/pdf_drawings.json");
        allFiles = await DrawingFileService.LoadAllFilesAsync(Http, "data/pdf_drawings.json");
    }

    public void Dispose()
    {
        State.OnStateChange -= StateHasChanged;
    }

    private void ApplyFilters()
    {
        searchQuery = DrawingFileService.GenerateUniversalSearch(State.DrawingNumber!.QueryString! + "*");
    }

    private void OnSearch()
    {
        searchQuery += "*";
        searchResults = DrawingFileService.SearchFiles(searchQuery, allFiles, State.DrawingNumber.QueryString);
        isSearchMode = searchResults.Any();
    }

     private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            OnSearch();
        }
    }



    private void ClearSearch()
    {
        searchQuery = string.Empty;
        isSearchMode = false;
        searchResults.Clear();
    }

    private async Task CopyFilePathToClipboard(string filePath)
    {
        await DrawingFileService.CopyFilePathToClipboard(JS, filePath);
    }

    private MarkupString GetFileIcon(string fileType)
    {
        return fileType switch
        {
            "PDF" => (MarkupString)"<i class='fas fa-file-pdf text-danger'></i>",
            "DWG" => (MarkupString)"<i class='fas fa-drafting-compass text-primary'></i>",
            _ => (MarkupString)"<i class='fas fa-file text-muted'></i>"
        };
    }
}
