@inherits LayoutComponentBase
@inject IDrawingNumber DrawingNumber
@inject IDrawingRequest DrawingRequest
@inject IDrawingRequestProcessor DrawingRequestProcessor
@inject IJSRuntime JSRuntime

<div class="page d-flex flex-column min-vh-100">
    <!-- Navbar with centered items and brand -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark border-bottom fixed-top shadow-lg">
        <div class="container-fluid">
            <a class="navbar-brand fw-bold fs-4 small" href="#">
                Belt Tools 
            </a>

            <div class="justify-content-center">
                <ShowInstructionsComponent />
            </div>

            <div class="d-flex ms-auto">
                <small class="text-warning">HabasitLink and KVP</small>
            </div>
        </div>
    </nav>

    

    

    <!-- Background animation for modular belt effect -->
    <main class="flex-grow-1 position-relative overflow-hidden">
        <div class="belt-background"></div>
        <div class="content-wrapper d-flex flex-column align-items-center" style="max-width: 700px; margin: 5rem auto 0;">
            <CascadingValue Value="(Action)UpdateFooter">
                @Body
            </CascadingValue>
        </div>
    </main>

    <footer class="footer-container @(!isFooterVisible ? "hidden" : "")">
    <div class="container-fluid bg-dark py-3 fixed-bottom" style="color: white;">
        <div class="row justify-content-center">
            <div >
                
                
                <!-- Row 1: Radio Inputs for Selecting Drawing Number or Query String -->
                <div class="d-flex justify-content-center gap-4" style="padding: 0.5rem;">
                    <div class="form-check" style="padding: 0.5rem;">
                        <input type="radio" id="drawingNumber" name="numberType" value="drawing" class="form-check-input" @onchange="(e) => showQueryString = false" checked>
                        <label class="form-check-label text-light" for="drawingNumber">Drawing Number</label>
                    </div>
                    <div class="form-check" style="padding: 0.5rem;">
                        <input type="radio" id="queryString" name="numberType" value="query" class="form-check-input" @onchange="(e) => showQueryString = true">
                        <label class="form-check-label text-light" for="queryString">Query String</label>
                    </div>

                </div>

                <!-- Row 2: Displaying the Drawing Number / Query String -->
                <h3 class="@(showQueryString ? "text-info" : "text-warning") text-center mb-0"
                    @onclick="CopyDrawingNumberToClipboard"
                    style="cursor: pointer; padding: 0.5rem; text-align: center; white-space: nowrap;"
                    data-bs-toggle="tooltip" data-bs-placement="top"
                    title="Click to copy to clipboard">
                    @(string.IsNullOrEmpty(GetDisplayValue()) ? "Create Drawing Number" : GetDisplayValue())
                </h3>


                <!-- Bootstrap Toast Notification -->
                <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11;">
                    <div id="clipboardToast" class="toast align-items-center text-bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
                        <div class="d-flex">
                            <div class="toast-body">Value copied to clipboard!</div>
                            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                    </div>
                </div>

                @if (showQueryString)
                {
                    <div class="alert alert-info p-xl-0 p-0 px-2 m-0 small">Click drawing number to update. <br /></div>

                

                <!-- Row 3: Toggle Switches for Query String Fields with Horizontal Scroll -->
                    <div class="px-5 mx-4 d-flex overflow-auto gap-5 small p-2"
                         style="white-space: nowrap; padding: 0 1rem; overflow-x: auto; display: flex; -webkit-overflow-scrolling: touch;">
                    <!-- Toggle Switch for Belt Type -->
                    <div class="form-check form-switch" style="min-width: 100px; padding: 0.5rem;">
                        <input type="checkbox" @onblur="HandleInputAsync" class="form-check-input" id="toggleType" @bind="DrawingNumberViewModel.IncludeBeltType">
                        <label class="form-check-label text-light" for="toggleType">Type</label>
                    </div>

                    <!-- Toggle Switch for Belt Series -->
                    <div class="form-check form-switch" style="min-width: 100px; padding: 0.5rem;">
                        <input type="checkbox" @onblur="HandleInputAsync"  class="form-check-input" id="toggleSeries" @bind="DrawingNumberViewModel.IncludeBeltSeries">
                        <label class="form-check-label text-light" for="toggleSeries">Series</label>
                    </div>

                    <!-- Toggle Switch for Color -->
                    <div class="form-check form-switch" style="min-width: 100px; padding: 0.5rem;">
                        <input type="checkbox" class="form-check-input" id="toggleColor" @onblur="HandleInputAsync" @bind="DrawingNumberViewModel.IncludeColor">
                        <label class="form-check-label text-light" for="toggleColor">Color</label>
                    </div>

                    <!-- Toggle Switch for Material -->
                    <div class="form-check form-switch" style="min-width: 100px; padding: 0.5rem;">
                        <input type="checkbox" class="form-check-input" id="toggleMaterial" @onblur="HandleInputAsync" @bind="DrawingNumberViewModel.IncludeMaterial">
                        <label class="form-check-label text-light" for="toggleMaterial">Material</label>
                    </div>

                    <!-- Toggle Switch for Adder Material -->
                    <div class="form-check form-switch" style="min-width: 100px; padding: 0.5rem;">
                        <input type="checkbox" @onblur="HandleInputAsync" class="form-check-input" id="toggleAdderMaterial" @bind="DrawingNumberViewModel.IncludeAdderMaterial">
                        <label class="form-check-label text-light" for="toggleAdderMaterial">Adder Material</label>
                    </div>

                    <!-- Toggle Switch for Rod Material -->
                    <div class="form-check form-switch" style="min-width: 100px; padding: 0.5rem;">
                        <input type="checkbox" @onblur="HandleInputAsync" class="form-check-input" id="toggleRodMaterial" @bind="DrawingNumberViewModel.IncludeRodMaterial">
                        <label class="form-check-label text-light" for="toggleRodMaterial">Rod Material</label>
                    </div>

                    <!-- Toggle Switch for Belt Width -->
                    <div class="form-check form-switch" style="min-width: 100px; padding: 0.5rem;">
                        <input type="checkbox" @onblur="HandleInputAsync" class="form-check-input" id="toggleWidth" @bind="DrawingNumberViewModel.IncludeBeltWidth">
                        <label class="form-check-label text-light" for="toggleWidth">Width</label>
                    </div>

                    <!-- Toggle Switch for Quantity of Rollers Across Width -->
                    <div class="form-check form-switch" style="min-width: 100px; padding: 0.5rem;">
                        <input type="checkbox" @onblur="HandleInputAsync" class="form-check-input" id="toggleQtyRollers" @bind="DrawingNumberViewModel.IncludeQtyRollersAcrossWidth">
                        <label class="form-check-label text-light" for="toggleQtyRollers">Rollers Qty</label>
                    </div>

                    <!-- Toggle Switch for F/R/G Centers -->
                    <div class="form-check form-switch" style="min-width: 100px; padding: 0.5rem;">
                        <input type="checkbox" @onblur="HandleInputAsync" class="form-check-input" id="toggleFRGCenters" @bind="DrawingNumberViewModel.IncludeFRGCenters">
                        <label class="form-check-label text-light" for="toggleFRGCenters">F/R/G Centers</label>
                    </div>

                    <!-- Toggle Switch for Belt Accessories -->
                    <div class="form-check form-switch" style="min-width: 100px; padding: 0.5rem;">
                        <input type="checkbox" @onblur="HandleInputAsync" class="form-check-input" id="toggleBeltAccessories" @bind="DrawingNumberViewModel.IncludeBeltAccessories">
                        <label class="form-check-label text-light" for="toggleBeltAccessories">Accessories</label>
                    </div>

                    <!-- Toggle Switch for Friction/Anti Static -->
                    <div class="form-check form-switch" style="min-width: 100px; padding: 0.5rem;">
                        <input type="checkbox" @onblur="HandleInputAsync" class="form-check-input" id="toggleFrictionAntiStatic" @bind="DrawingNumberViewModel.IncludeFrictionAntiStatic">
                        <label class="form-check-label text-light" for="toggleFrictionAntiStatic">Friction/Anti Static</label>
                    </div>

                    <!-- Toggle Switch for Flights/Rollers/Grips -->
                    <div class="mx-5 form-check form-switch" style="min-width: 100px; padding: 0.5rem;">
                        <input type="checkbox" @onblur="HandleInputAsync" class="form-check-input" id="toggleFlightsRollersGrips" @bind="DrawingNumberViewModel.IncludeFlightsRollersGrips">
                        <label class="form-check-label text-light" for="toggleFlightsRollersGrips">Flights/Rollers/Grips</label>
                    </div>

                    <!-- Toggle Switch for Side-PL/Lane-DV -->
                    <div class="mx-4 form-check form-switch" style="min-width: 100px; padding: 0.5rem;">
                        <input type="checkbox" @onblur="HandleInputAsync" class="form-check-input" id="toggleSidePLLaneDV" @bind="DrawingNumberViewModel.IncludeSidePLLaneDV">
                        <label class="form-check-label text-light" for="toggleSidePLLaneDV">Side-PL/Lane-DV</label>
                    </div>

                    <!-- Toggle Switch for Unique Identification -->
                    <div class="form-check form-switch" style="min-width: 100px; padding: 0.5rem;">
                        <input type="checkbox" @onblur="HandleInputAsync"  class="form-check-input" id="toggleUniqueIdentification" @bind="DrawingNumberViewModel.IncludeUniqueIdentification">
                        <label class="form-check-label text-light" for="toggleUniqueIdentification">Unique ID</label>
                    </div>

                    <!-- Toggle Switch for Indent Code -->
                    <div class="form-check form-switch" style="min-width: 100px; padding: 0.5rem;">
                        <input type="checkbox" @onblur="HandleInputAsync" class="form-check-input" id="toggleIndentCode" @bind="DrawingNumberViewModel.IncludeIndentCode">
                        <label class="form-check-label text-light" for="toggleIndentCode">Indent Code</label>
                    </div>
                </div>
                }
            </div>
        </div>
    </div>
    </footer>

</div>

@code {
    private bool isFooterVisible = true; // Initial state of the footer (visible by default)

    private void ToggleFooter()
    {
        isFooterVisible = !isFooterVisible;
    }
}

<!-- Toggle Button for Footer Visibility -->
<button class="footer-toggle-btn" @onclick="ToggleFooter" aria-label="Toggle Footer">
    <span><i class="fa-solid @(isFooterVisible ? "fa-chevron-down" : "fa-chevron-up")"></i></span>
</button>

@code {
    private bool showQueryString = false;

    // Shared input handling logic to generate drawing number and update query string
    protected async Task HandleInputAsync()
    {
        DrawingRequestProcessor!.GenerateDrawingNumber();
        DrawingRequest!.QueryString = DrawingNumber!.GetDrawingQueryString();

        Console.WriteLine("Input Handled!");
    }



    private string GetDisplayValue()
    {
        return showQueryString ? DrawingRequest.QueryString : DrawingNumber.GetDrawingNumber();
    }

    public void UpdateFooter()
    {
        StateHasChanged(); // Ensures the footer updates with the latest values
    }

    private async Task CopyDrawingNumberToClipboard()
    {
        var drawingNumber = GetDisplayValue();
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", drawingNumber);

        // Show the toast notification
        await JSRuntime.InvokeVoidAsync("showToast");
    }
}

<script>
    function showToast() {
        const toastEl = document.getElementById('clipboardToast');
        const toast = new bootstrap.Toast(toastEl);
        toast.show();
    }

    // Initialize Bootstrap tooltips
    document.addEventListener('DOMContentLoaded', function () {
        const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerList.forEach(function (tooltipTriggerEl) {
            new bootstrap.Tooltip(tooltipTriggerEl);
        });
    });

        
</script>
