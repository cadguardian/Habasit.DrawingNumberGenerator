@page "/part-numbers"
@using Client.Components.Search
@inject IPartNumberService PartNumberService
@inject IDrawingRequest drawingRequest

@code {
    private string universalSearch = string.Empty;
    private IEnumerable<KeyValuePair<string, string>> FilteredPartNumbers { get; set; } = Enumerable.Empty<KeyValuePair<string, string>>();
    private int currentPage = 1;
    private int itemsPerPage = 10;
    private int totalItems;
    private int totalPages => (int)Math.Ceiling((double)totalItems / itemsPerPage);

    private bool isLoading = true;
    private string errorMessage = string.Empty;
    private bool isSortedAsc = true;

    private Timer? debounceTimer;

    protected override async Task OnInitializedAsync()
    {
       await  GetPartNumbersGoogleDrive();
    }

    private async Task GetPartNumbersLocally()
    {
        try
        {
            // Initialization without loading part numbers
            var csvFilePath = "Data/partNumbers.csv";
            var fullPath = Path.Combine(Directory.GetCurrentDirectory(), csvFilePath);
            await PartNumberService.InitializeAsync(fullPath);
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task GetPartNumbersGoogleDrive()
    {
        try
        {
            // Initialization without loading part numbers
            var csvFilePath = "https://raw.githubusercontent.com/cadguardian/Habasit-CADMedia/refs/heads/main/partNumbers.csv";
            await PartNumberService.InitializeAsync(csvFilePath);
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private bool isFreeSearchMode = false; // Track free search mode state

    private void ApplyFilters()
    {
        if (!isFreeSearchMode && (string.IsNullOrWhiteSpace(drawingRequest.BeltType) ||
            string.IsNullOrWhiteSpace(drawingRequest.Color) ||
            string.IsNullOrWhiteSpace(drawingRequest.Material)))
        {
            errorMessage = "Please complete the drawing request fields before filtering.";
            FilteredPartNumbers = Enumerable.Empty<KeyValuePair<string, string>>();
            totalItems = 0;
        }
        else
        {
            errorMessage = string.Empty;
            var partNumbers = PartNumberService.FilterPartNumbers(drawingRequest, universalSearch, isFreeSearchMode);
            totalItems = partNumbers.Count();
            FilteredPartNumbers = partNumbers.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage);
        }
    }

    private async Task OnInputChange(ChangeEventArgs e)
    {
        universalSearch = e.Value?.ToString() ?? string.Empty;

        debounceTimer?.Dispose();
        debounceTimer = new Timer(_ =>
        {
            InvokeAsync(() => ApplyFilters());
        }, null, 300, Timeout.Infinite);
    }

    private void ChangeItemsPerPage(ChangeEventArgs e)
    {
        itemsPerPage = int.Parse(e.Value?.ToString() ?? "10");
        currentPage = 1;
        ApplyFilters();
    }

    private void GoToPage(int pageNumber)
    {
        currentPage = pageNumber;
        ApplyFilters();
    }

    private void ToggleSort()
    {
        isSortedAsc = !isSortedAsc;
        FilteredPartNumbers = isSortedAsc
            ? FilteredPartNumbers.OrderBy(p => p.Key)
            : FilteredPartNumbers.OrderByDescending(p => p.Key);
    }
}


<div class="card container-fluid my-4 p-4">
    <div class="mb-4">
        <span class="me-2"><i class="fa-solid fa-boxes-stacked"></i></span> <!-- Available Materials Icon -->

        <InputGroupTitle Title="Available Materials"
                         Subtitle="Utilize Effective Search Terms"
                         Description="Enter multiple search terms separated by spaces to filter part numbers effectively. The search will match any part whose type or description contains all specified terms in any order. Additionally, the fields for Type, Series, Color, and Material will further refine your search results. As you fill in these fields, results will dynamically update, allowing you to pinpoint the exact components you need for your assembly." />

        <div class="input-group mb-3">
            <input id="universalSearch" @oninput="OnInputChange" class="form-control form-control-lg"
                   placeholder="Find available parts..." aria-label="Search for parts" />
            <button class="btn btn-outline-dark btn-lg" @onclick="ApplyFilters" aria-label="Filter Search">Filter</button>

        </div>
        @* Add Free Search Mode Toggle *@
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div class="form-check form-switch">
                <input type="checkbox" class="form-check-input" id="freeSearchMode" @bind="isFreeSearchMode">
                <label class="form-check-label text-dark" for="freeSearchMode">Free Search Mode</label>
            </div>
        </div>
        @if (totalItems > 0)
        {
            <div class="alert alert-secondary text-center m-0 p-0">
                @totalItems parts found. Displaying @FilteredPartNumbers.Count() parts.
            </div>
        }
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-warning text-center">@errorMessage</div>
    }
    else if (FilteredPartNumbers == null || !FilteredPartNumbers.Any())
    {
        <div class="alert alert-info text-center">No data found. Please complete the drawing request and press "Filter Search" to view qualified materials.</div>
    }
    else
    {
        <!-- Table Wrapper for Mobile Responsiveness -->
        <div class="table-responsive">
            <table class="table table-hover table-bordered table-striped" style="font-size: 0.9em;">
                <thead class="table-dark">
                    <tr>
                        <th scope="col" @onclick="ToggleSort" style="cursor: pointer;" aria-label="Sort by part number" data-label="Part Number">
                            Part Number <span>@(isSortedAsc ? "▲" : "▼")</span>
                        </th>
                        <th scope="col" aria-label="Description" data-label="Description">
                            Description
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var part in FilteredPartNumbers)
                    {
                        <tr>
                            <td data-label="Part Number">@part.Key</td>
                            <td class="small" data-label="Description">@part.Value</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

    }

    @if (totalPages > 1)
    {
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="() => GoToPage(1)">First</button>
                </li>
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="() => GoToPage(currentPage - 1)">Previous</button>
                </li>
                @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                {
                    <li class="page-item @(i == currentPage ? "active" : "")">
                        <button class="page-link" @onclick="() => GoToPage(i)">@i</button>
                    </li>
                }
                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="() => GoToPage(currentPage + 1)">Next</button>
                </li>
                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="() => GoToPage(totalPages)">Last</button>
                </li>
            </ul>
        </nav>
        <div class="d-flex justify-content-center align-items-center my-3">
            <label class="me-2">Show:</label>
            <select class="form-select form-select-sm w-auto" @onchange="ChangeItemsPerPage">
                <option value="5">5</option>
                <option value="10" selected>10</option>
                <option value="20">20</option>
                <option value="50">50</option>
                <option value="100">100</option>
            </select>
            <span class="ms-2">items per page</span>
        </div>
    }
</div>
