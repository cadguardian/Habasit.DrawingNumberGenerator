@page "/belt-series"
@using DNG.Library.Models.BeltSpecs
@inject HttpClient Http
@inject IBeltSeriesService BeltSeriesService
@inject IStateContainer State
@inject IImageGalleryService ImageGalleryService

<div class="col-6">
            <div class="input-group">
                <div class="form-floating">
                    <select id="beltSeries" class="form-select form-select-sm"
                            @bind="beltSeries"
                            required>
                        <option value="" disabled selected>Select Belt Series</option>
                        @foreach (var series in BeltSeries.Options.Keys.OrderBy(_ => _))
                        {
                            <option value="@series">@series</option>
                        }
                    </select>
                    <label for="beltSeries">Series</label>
                </div>
                <span class="input-group-text">@BeltSeriesService.GetBeltSeriesType(State.DrawingRequest?.BeltSeries ?? "")</span>
    </div>
</div>

@code {
    @code {
        protected override void OnInitialized()
        {
            State.OnStateChange += StateHasChanged;
        }

        public void Dispose()
        {
            State.OnStateChange -= StateHasChanged;
        }
    }

    private void UpdateBeltSeriesCode(string series)
        {
    State.UpdateProperty(State.DrawingNumber, dn => dn.BeltSeriesCode = series);
        }

    private string beltSeries
    {
    get => State.DrawingRequest?.BeltSeries ?? string.Empty;
    set
    {
        if (State.DrawingRequest != null)
        {
            UpdateBeltSeries(value);
        }
    }
    }

    public void UpdateBeltSeries(string beltSeries)
        {
    State.UpdateProperty(State.DrawingRequest, dr => dr.BeltSeries = beltSeries);

    UpdateBeltSeriesCode(beltSeries);
        }

    private List<string> imageFiles = new();

    protected override async Task OnInitializedAsync()
    {
        // Load image files with service
        imageFiles = await BeltSeriesService.LoadImageFilesAsync(Http);
    }
}
