@using System.Text.RegularExpressions
@using System.Net.Http.Json
@inject HttpClient Http
@inject IDrawingRequest DrawingRequest

<div class="input-group mb-3">

    <div class="container px-4">
        <span class="input-group-text display-4">@BeltSeries.GetBeltSeriesType(DrawingRequest?.BeltSeries ?? "")</span>

        <div class="col gx-5">
            <div class="col d-flex justify-content-center align-items-center">
                @if (selectedImage != null)
                {
                    <img src="images/belts/@selectedImage" alt="Belt Image" class="img-thumbnail m-4" style="max-width: 100%;" />
                }
                else if (!string.IsNullOrEmpty(DrawingRequest?.BeltSeries))
                {
                    <p class="text-danger">No image available for the selected belt series.</p>
                }
            </div>

            <div class="col">
                <div class="form-floating mt-4">
                    <select id="beltSeries" class="form-select form-select-sm"
                            @bind="beltSeries"
                            required>
                        <option value="" disabled selected>Select Belt Series</option>
                        @foreach (var series in BeltSeries.Options.Keys.OrderBy(_ => _))
                        {
                            <option value="@series">@series</option>
                        }
                    </select>
                    <label for="beltSeries">Series</label>
                </div>
                <div class="col-12 mt-4">
                    <SelectBeltType />
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string beltSeries
    {
        get => DrawingRequest?.BeltSeries ?? string.Empty;
        set
        {
            if (DrawingRequest != null)
            {
                DrawingRequest.BeltSeries = value;
                selectedImage = GetImageFileNameForBeltSeries(DrawingRequest.BeltSeries, imageFiles);
            }
        }
    }

    private List<string> imageFiles = new();
    private string? selectedImage;

    protected override async Task OnInitializedAsync()
    {
        // Load the list of image file names
        imageFiles = await Http.GetFromJsonAsync<List<string>>("images/belts/images.json");
    }

    private string? GetImageFileNameForBeltSeries(string beltSeriesCode, List<string> imageFileNames)
    {
        var beltTokens = Tokenize(beltSeriesCode);

        int maxMatches = 0;
        string? bestMatch = null;

        foreach (var imageFile in imageFileNames)
        {
            var imageName = NormalizeImageName(imageFile);
            var imageTokens = Tokenize(imageName);

            // Count matching tokens
            int matches = beltTokens.Intersect(imageTokens).Count();

            if (matches > maxMatches)
            {
                maxMatches = matches;
                bestMatch = imageFile;
            }
        }

        return bestMatch;
    }

    private static List<string> Tokenize(string input)
    {
        var matches = Regex.Matches(input ?? string.Empty, @"[A-Za-z]+|\d+");
        return matches.Select(m => m.Value.ToUpper()).ToList();
    }

    private static string NormalizeImageName(string imageName)
    {
        string name = Path.GetFileNameWithoutExtension(imageName ?? string.Empty);
        if (name.StartsWith("ModularBelt_", StringComparison.OrdinalIgnoreCase))
        {
            name = name.Substring("ModularBelt_".Length);
        }
        return name.ToUpper();
    }
}
